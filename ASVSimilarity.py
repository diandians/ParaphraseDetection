import math
"""
    This documents calculate sentence similarity using average sentence vectors
    which are generated by saveSentenceVec.py
"""

##open microsoft corpus
file_v = open('output/sen_vec.txt')
try:
    vecs = file_v.readlines()
finally:
    file_v.close()

##write output data
output = open('output/senPairSimilarity.txt', 'w')

v = [[] ]* vecs.__len__()
len_i = -1
dimension = 0
for vector in vecs:
    data = ""
    len_i += 1
    get_vec = []
    dimension = 0
    for s in vector: 
        if s == '[' or s ==' ': 
            continue
        elif s == ',' or s == ']':
            #get vector
            get_vec.append(float(data))
            dimension += 1
            data = ""
        elif s == '\t':
            #get index
            get_vec.append(int(data))
            data = ""
        else: 
            data += s

    v[len_i] = get_vec

CONST_NUM = dimension


#caculate similarity by cosine
def similarity(vec1, vec2):
    sum0 = 0
    sum_v1 = 0
    sum_v2 = 0
    for vec_i in range(0, CONST_NUM):
        if vec_i == 0:
            continue
        sum0 += vec1[vec_i]*vec2[vec_i]
        sum_v1 += vec1[vec_i]*vec1[vec_i]
        sum_v2 += vec2[vec_i]*vec2[vec_i]

    return sum0/math.sqrt(sum_v1*sum_v2)

#test similarity
for j in range(0, len_i, 2):
    output.writelines(str(similarity(v[j], v[j+1]))+'\t' +str(v[j][0])+'\t '+str(v[j+1][0]) + '\n')



##close output data file
output.close()
